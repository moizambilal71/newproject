# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import sympy.physics.mechanics.rigidbody as module_0
import sympy.physics.mechanics.inertia as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    str_0 = '[jF=QT\\8T 4Q^"wS'
    module_0.RigidBody(str_0, frame=str_0)


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    none_type_0.linear_momentum(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    str_0 = "v;"
    module_0.RigidBody(str_0, inertia=str_0)


def test_case_3():
    str_0 = "Sag9gVzg vYVok*V6"
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = ")BUtS>hK8B."
    module_0.RigidBody(str_0, inertia=str_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    str_0 = "Sag9gVzg vYVok*V6"
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    rigid_body_1 = module_0.RigidBody(str_0, inertia=none_type_0)
    assert (
        f"{type(rigid_body_1).__module__}.{type(rigid_body_1).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_1.points == []
    var_0 = rigid_body_1.__repr__()
    assert (
        var_0
        == "RigidBody('Sag9gVzg vYVok*V6', masscenter=Sag9gVzg vYVok*V6_masscenter, frame=Sag9gVzg vYVok*V6_frame, mass=Sag9gVzg vYVok*V6_mass, inertia=Inertia(dyadic=Sag9gVzg vYVok*V6_ixx*(Sag9gVzg vYVok*V6_frame.x|Sag9gVzg vYVok*V6_frame.x) + Sag9gVzg vYVok*V6_ixy*(Sag9gVzg vYVok*V6_frame.x|Sag9gVzg vYVok*V6_frame.y) + Sag9gVzg vYVok*V6_izx*(Sag9gVzg vYVok*V6_frame.x|Sag9gVzg vYVok*V6_frame.z) + Sag9gVzg vYVok*V6_ixy*(Sag9gVzg vYVok*V6_frame.y|Sag9gVzg vYVok*V6_frame.x) + Sag9gVzg vYVok*V6_iyy*(Sag9gVzg vYVok*V6_frame.y|Sag9gVzg vYVok*V6_frame.y) + Sag9gVzg vYVok*V6_iyz*(Sag9gVzg vYVok*V6_frame.y|Sag9gVzg vYVok*V6_frame.z) + Sag9gVzg vYVok*V6_izx*(Sag9gVzg vYVok*V6_frame.z|Sag9gVzg vYVok*V6_frame.x) + Sag9gVzg vYVok*V6_iyz*(Sag9gVzg vYVok*V6_frame.z|Sag9gVzg vYVok*V6_frame.y) + Sag9gVzg vYVok*V6_izz*(Sag9gVzg vYVok*V6_frame.z|Sag9gVzg vYVok*V6_frame.z), point=Sag9gVzg vYVok*V6_masscenter))"
    )
    var_0.__getnewargs_ex__()


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = '[jF=QT\\8T 4Q^"wS'
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    rigid_body_0.parallel_axis(none_type_0, rigid_body_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = '[jF=QT\\8T 4Q^"mwS'
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    rigid_body_0.parallel_axis(rigid_body_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "Sag9gVzg vYVok*V6"
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    none_type_0 = None
    rigid_body_0.angular_momentum(none_type_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    str_0 = '[jF=QT\\8T 4Q^"wS'
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    rigid_body_0.kinetic_energy(rigid_body_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    str_0 = "Sag9gVzg vYVok*V6"
    none_type_0 = None
    rigid_body_0 = module_0.RigidBody(str_0, inertia=none_type_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    rigid_body_0.set_potential_energy(rigid_body_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '[jF=QT\\8T 4Q^"wS'
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    rigid_body_0.linear_momentum(str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    str_0 = "v;"
    rigid_body_0 = module_0.RigidBody(str_0)
    assert (
        f"{type(rigid_body_0).__module__}.{type(rigid_body_0).__qualname__}"
        == "sympy.physics.mechanics.rigidbody.RigidBody"
    )
    assert rigid_body_0.points == []
    assert (
        f"{type(module_0.RigidBody.frame).__module__}.{type(module_0.RigidBody.frame).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.x).__module__}.{type(module_0.RigidBody.x).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.y).__module__}.{type(module_0.RigidBody.y).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.z).__module__}.{type(module_0.RigidBody.z).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.inertia).__module__}.{type(module_0.RigidBody.inertia).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.RigidBody.central_inertia).__module__}.{type(module_0.RigidBody.central_inertia).__qualname__}"
        == "builtins.property"
    )
    module_1.inertia_of_point_mass(rigid_body_0, rigid_body_0, rigid_body_0)
