# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import httpx._utils as module_0
import ipaddress as module_1
import re as module_2


def test_case_0():
    dict_0 = module_0.get_environment_proxies()


@pytest.mark.xfail(strict=True)
def test_case_1():
    none_type_0 = None
    str_0 = module_0.primitive_value_to_str(none_type_0)
    assert str_0 == ""
    bool_0 = True
    bool_1 = module_0.is_ipv4_hostname(bool_0)
    assert bool_1 is False
    var_0 = module_1.ip_interface(bool_0)
    int_0 = var_0.__hash__()
    str_1 = module_0.primitive_value_to_str(bool_0)
    assert str_1 == "true"
    var_0.compare_networks(str_1)


def test_case_2():
    int_0 = -1352
    str_0 = module_0.primitive_value_to_str(int_0)
    assert str_0 == "-1352"


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "4|IZcs?y$"
    bytes_0 = module_0.to_bytes(str_0)
    assert bytes_0 == b"4|IZcs?y$"
    str_1 = "194"
    str_2 = "all://["
    u_r_l_pattern_0 = module_0.URLPattern(str_2)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "all://["
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == "%5B"
    assert u_r_l_pattern_0.port is None
    assert (
        f"{type(u_r_l_pattern_0.host_regex).__module__}.{type(u_r_l_pattern_0.host_regex).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    u_r_l_pattern_0.matches(str_1)


def test_case_4():
    bytes_0 = b"\xa8\xd6O\\\xc9d\xdf\x86h\x19:\xa5\x13\xf3>"
    bytes_1 = module_0.to_bytes(bytes_0)
    bytes_2 = b""
    with pytest.raises(ValueError):
        module_1.ip_interface(bytes_2)


def test_case_5():
    str_0 = "0YLaxo:,:{*@'\\"
    bool_0 = module_0.is_ipv4_hostname(str_0)
    assert bool_0 is False
    str_1 = "e$\x0cwji[11Kd"
    bool_1 = module_0.is_ipv6_hostname(str_1)
    assert bool_1 is False
    str_2 = module_0.to_str(str_1)
    dict_0 = module_0.get_environment_proxies()


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    module_0.to_str(none_type_0)


def test_case_7():
    str_0 = ""
    var_0 = module_0.to_bytes_or_str(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    dict_0 = module_0.get_environment_proxies()
    none_type_0 = None
    module_0.to_bytes_or_str(none_type_0, none_type_0)


def test_case_9():
    str_0 = "xs*&"
    str_1 = module_0.to_bytes_or_str(str_0, str_0)
    bool_0 = module_0.is_ipv4_hostname(str_0)
    assert bool_0 is False
    str_2 = module_0.unquote(str_1)
    dict_0 = module_0.get_environment_proxies()


def test_case_10():
    str_0 = ">"
    var_0 = module_0.peek_filelike_length(str_0)


def test_case_11():
    str_0 = "all://["
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "all://["
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == "%5B"
    assert u_r_l_pattern_0.port is None
    assert (
        f"{type(u_r_l_pattern_0.host_regex).__module__}.{type(u_r_l_pattern_0.host_regex).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )


def test_case_12():
    str_0 = ""
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == ""
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )


def test_case_13():
    str_0 = "$"
    bool_0 = module_0.is_ipv4_hostname(str_0)
    assert bool_0 is False


def test_case_14():
    dict_0 = module_2.purge()
    bool_0 = module_0.is_ipv6_hostname(dict_0)
    assert bool_0 is False


def test_case_15():
    str_0 = "C"
    str_1 = module_0.unquote(str_0)
    assert str_1 == "C"
    with pytest.raises(ValueError):
        module_0.URLPattern(str_0)


def test_case_16():
    address_value_error_0 = module_1.AddressValueError()
    var_0 = module_0.peek_filelike_length(address_value_error_0)
    none_type_0 = None
    str_0 = module_0.primitive_value_to_str(none_type_0)
    assert str_0 == ""
    with pytest.raises(ValueError):
        module_1.ip_interface(none_type_0)


def test_case_17():
    str_0 = "m"
    str_1 = module_0.unquote(str_0)
    assert str_1 == "m"


def test_case_18():
    str_0 = "0YLaxo:,:{*@'\\"
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "0YLaxo:,:{*@'\\"
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    bool_0 = u_r_l_pattern_0.__lt__(u_r_l_pattern_0)
    assert bool_0 is False


@pytest.mark.xfail(strict=True)
def test_case_19():
    str_0 = "0YLaxo:,:{*@'\\"
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "0YLaxo:,:{*@'\\"
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    bool_0 = u_r_l_pattern_0.__lt__(u_r_l_pattern_0)
    assert bool_0 is False
    module_2.sub(u_r_l_pattern_0, u_r_l_pattern_0, str_0)


def test_case_20():
    str_0 = ""
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == ""
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    var_0 = u_r_l_pattern_0.matches(u_r_l_pattern_0)
    assert var_0 is True


def test_case_21():
    str_0 = ""
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == ""
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    bool_0 = u_r_l_pattern_0.__eq__(str_0)
    assert bool_0 is False
    bool_1 = u_r_l_pattern_0.__lt__(u_r_l_pattern_0)
    assert bool_1 is False


@pytest.mark.xfail(strict=True)
def test_case_22():
    str_0 = "0YLaxo:,:{*@'\\"
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "0YLaxo:,:{*@'\\"
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    bool_0 = u_r_l_pattern_0.__eq__(u_r_l_pattern_0)
    assert bool_0 is True
    var_0 = u_r_l_pattern_0.__str__()
    var_1 = u_r_l_pattern_0.matches(u_r_l_pattern_0)
    assert var_1 is True
    var_2 = u_r_l_pattern_0.matches(var_0)
    assert var_2 is True
    var_0.__reduce__()


@pytest.mark.xfail(strict=True)
def test_case_23():
    str_0 = "Q4R3DB@A}P[Y"
    bool_0 = module_0.is_ipv6_hostname(str_0)
    assert bool_0 is False
    none_type_0 = None
    str_1 = module_0.primitive_value_to_str(bool_0)
    assert str_1 == "false"
    module_0.URLPattern(none_type_0)


def test_case_24():
    str_0 = "axo:,:{*@'"
    str_1 = "m"
    str_2 = module_0.unquote(str_1)
    assert str_2 == "m"
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "axo:,:{*@'"
    assert u_r_l_pattern_0.scheme == "axo"
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    var_0 = u_r_l_pattern_0.matches(u_r_l_pattern_0)
    assert var_0 is True
    bool_0 = module_0.is_ipv6_hostname(str_2)
    assert bool_0 is False


def test_case_25():
    str_0 = "m"
    str_1 = '"'
    str_2 = module_0.unquote(str_1)
    assert str_2 == ""
    with pytest.raises(ValueError):
        module_0.URLPattern(str_0)


def test_case_26():
    str_0 = "all://*"
    dict_0 = module_0.get_environment_proxies()
    none_type_0 = None
    var_0 = module_1.summarize_address_range(str_0, none_type_0)
    str_1 = module_0.unquote(str_0)
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "all://*"
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )


def test_case_27():
    str_0 = "NYLaxo:,dp*@'\\"
    str_1 = module_0.unquote(str_0)
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "NYLaxo:,dp*@'\\"
    assert u_r_l_pattern_0.scheme == "nylaxo"
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_0.to_bytes_or_str(u_r_l_pattern_0, str_0)
    assert var_0.scheme == "nylaxo"
    assert var_0.host_regex is None
    var_1 = var_0.matches(u_r_l_pattern_0)
    assert var_1 is True
    str_2 = "4|IZcs?y$"
    bool_0 = u_r_l_pattern_0.__eq__(var_0)
    assert bool_0 is True
    bytes_0 = module_0.to_bytes(var_0)
    assert bytes_0.scheme == "nylaxo"
    assert bytes_0.host_regex is None
    var_2 = module_0.to_bytes_or_str(str_2, u_r_l_pattern_0)
    int_0 = var_0.__hash__()
    var_3 = var_1.__lt__(var_2)
    bool_1 = str_0.__lt__(var_0)
    str_3 = module_0.primitive_value_to_str(bool_0)
    assert str_3 == "true"
    bool_2 = module_0.is_ipv4_hostname(str_0)
    assert bool_2 is False
    bool_3 = module_0.is_ipv6_hostname(var_1)
    assert bool_3 is False
    dict_0 = module_0.get_environment_proxies()
    var_4 = module_0.peek_filelike_length(dict_0)
    var_5 = module_2.purge()
    var_6 = module_0.peek_filelike_length(bool_3)
    var_7 = var_3.__str__()
    var_8 = var_1.__eq__(str_2)
    str_4 = "all://["
    u_r_l_pattern_1 = module_0.URLPattern(str_4)
    assert u_r_l_pattern_1.scheme == ""
    assert u_r_l_pattern_1.host == "%5B"
    assert (
        f"{type(u_r_l_pattern_1.host_regex).__module__}.{type(u_r_l_pattern_1.host_regex).__qualname__}"
        == "re.Pattern"
    )
    var_9 = var_5.__lt__(bool_3)
    var_10 = u_r_l_pattern_0.matches(u_r_l_pattern_1)
    assert var_10 is False


def test_case_28():
    str_0 = "NYLaxo:,dp*@'\\"
    bool_0 = module_0.is_ipv4_hostname(str_0)
    assert bool_0 is False
    str_1 = module_0.unquote(str_0)
    u_r_l_pattern_0 = module_0.URLPattern(str_0)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "NYLaxo:,dp*@'\\"
    assert u_r_l_pattern_0.scheme == "nylaxo"
    assert u_r_l_pattern_0.host == ""
    assert u_r_l_pattern_0.port is None
    assert u_r_l_pattern_0.host_regex is None
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_0.to_bytes_or_str(u_r_l_pattern_0, str_0)
    assert var_0.scheme == "nylaxo"
    assert var_0.host_regex is None
    var_1 = var_0.matches(u_r_l_pattern_0)
    assert var_1 is True
    str_2 = "4|IZcs?y$"
    bool_1 = u_r_l_pattern_0.__eq__(var_0)
    assert bool_1 is True
    bytes_0 = module_0.to_bytes(var_0)
    assert bytes_0.scheme == "nylaxo"
    assert bytes_0.host_regex is None
    var_2 = module_0.to_bytes_or_str(str_2, u_r_l_pattern_0)
    int_0 = var_0.__hash__()
    bool_2 = var_0.__lt__(var_0)
    assert bool_2 is False
    bool_3 = module_0.is_ipv4_hostname(str_0)
    assert bool_3 is False
    dict_0 = module_0.get_environment_proxies()
    var_3 = module_0.to_bytes_or_str(u_r_l_pattern_0, str_0)
    assert var_3.scheme == "nylaxo"
    assert var_3.host_regex is None
    var_4 = module_0.peek_filelike_length(dict_0)
    var_5 = module_2.purge()
    var_6 = module_0.peek_filelike_length(bool_1)
    var_7 = var_1.__eq__(str_2)
    var_8 = var_4.__eq__(var_5)
    str_3 = "all://["
    u_r_l_pattern_1 = module_0.URLPattern(str_3)
    assert u_r_l_pattern_1.scheme == ""
    assert u_r_l_pattern_1.host == "%5B"
    assert (
        f"{type(u_r_l_pattern_1.host_regex).__module__}.{type(u_r_l_pattern_1.host_regex).__qualname__}"
        == "re.Pattern"
    )
    var_9 = u_r_l_pattern_1.matches(var_0)
    assert var_9 is False


def test_case_29():
    str_0 = "4|IZcs?y$"
    bool_0 = module_0.is_ipv4_hostname(str_0)
    assert bool_0 is False
    var_0 = module_2.purge()
    str_1 = "all://["
    u_r_l_pattern_0 = module_0.URLPattern(str_1)
    assert (
        f"{type(u_r_l_pattern_0).__module__}.{type(u_r_l_pattern_0).__qualname__}"
        == "httpx._utils.URLPattern"
    )
    assert u_r_l_pattern_0.pattern == "all://["
    assert u_r_l_pattern_0.scheme == ""
    assert u_r_l_pattern_0.host == "%5B"
    assert u_r_l_pattern_0.port is None
    assert (
        f"{type(u_r_l_pattern_0.host_regex).__module__}.{type(u_r_l_pattern_0.host_regex).__qualname__}"
        == "re.Pattern"
    )
    assert (
        f"{type(module_0.URLPattern.priority).__module__}.{type(module_0.URLPattern.priority).__qualname__}"
        == "builtins.property"
    )
    var_1 = u_r_l_pattern_0.matches(u_r_l_pattern_0)
    assert var_1 is True
    u_r_l_pattern_1 = var_0.__repr__()
