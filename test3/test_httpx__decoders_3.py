# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import httpx._decoders as module_0
import codecs as module_1


def test_case_0():
    deflate_decoder_0 = module_0.DeflateDecoder()
    assert deflate_decoder_0.first_attempt is True
    assert (
        f"{type(deflate_decoder_0.decompressor).__module__}.{type(deflate_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3


@pytest.mark.xfail(strict=True)
def test_case_1():
    line_decoder_0 = module_0.LineDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = line_decoder_0.flush()
    g_zip_decoder_0 = module_0.GZipDecoder()
    assert (
        f"{type(g_zip_decoder_0.decompressor).__module__}.{type(g_zip_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    bytes_1 = line_decoder_0.flush()
    bytes_2 = b"Accept"
    g_zip_decoder_0.decode(bytes_2)


def test_case_2():
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_3():
    with pytest.raises(ImportError):
        module_0.ZStandardDecoder()


def test_case_4():
    byte_chunker_0 = module_0.ByteChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = b"\xd5Q\x0fC\xed\xf8mk\xa9(b\xfa8\xac\x83?\xde\xd4,A"
    list_0 = byte_chunker_0.decode(bytes_0)
    list_1 = byte_chunker_0.decode(byte_chunker_0)


def test_case_5():
    byte_chunker_0 = module_0.ByteChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = b"\xcep\xa6x\xf73}\xb7"
    list_0 = byte_chunker_0.flush()
    list_1 = byte_chunker_0.decode(bytes_0)


def test_case_6():
    str_0 = ":KcLR"
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = text_chunker_0.decode(str_0)


def test_case_7():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = text_chunker_0.flush()


@pytest.mark.xfail(strict=True)
def test_case_8():
    byte_chunker_0 = module_0.ByteChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = byte_chunker_0.flush()
    line_decoder_0 = module_0.LineDecoder()
    line_decoder_0.decode(byte_chunker_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    identity_decoder_0 = module_0.IdentityDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = identity_decoder_0.decode(identity_decoder_0)
    assert (
        f"{type(bytes_0).__module__}.{type(bytes_0).__qualname__}"
        == "httpx._decoders.IdentityDecoder"
    )
    module_1.getincrementalencoder(bytes_0)


def test_case_10():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    identity_decoder_0 = module_0.IdentityDecoder()
    line_decoder_0 = module_0.LineDecoder()
    bytes_0 = identity_decoder_0.flush()
    assert bytes_0 == b""
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    str_0 = "\nFZxp?zriV}A"
    list_2 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ["FZxp?zriV}A"]
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    bool_0 = True
    byte_chunker_0 = module_0.ByteChunker(bool_0)
    str_1 = "^b6d4{d("
    list_3 = text_chunker_0.decode(str_1)
    bytes_1 = b"\xb2"
    list_4 = byte_chunker_0.decode(bytes_1)
    str_2 = ' 6D@uA"hbOhh&B6k+N'
    text_chunker_1 = module_0.TextChunker(bool_0)
    list_5 = text_chunker_1.decode(str_2)
    str_3 = "wRWS\r3;nq]STq"
    list_6 = line_decoder_0.decode(str_3)
    assert line_decoder_0.buffer == ["3;nq]STq"]
    list_7 = byte_chunker_0.flush()
    list_8 = byte_chunker_0.flush()
    list_9 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_11():
    g_zip_decoder_0 = module_0.GZipDecoder()
    assert (
        f"{type(g_zip_decoder_0.decompressor).__module__}.{type(g_zip_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3


@pytest.mark.xfail(strict=True)
def test_case_12():
    deflate_decoder_0 = module_0.DeflateDecoder()
    assert deflate_decoder_0.first_attempt is True
    assert (
        f"{type(deflate_decoder_0.decompressor).__module__}.{type(deflate_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3
    none_type_0 = None
    text_chunker_0 = module_0.TextChunker(none_type_0)
    module_0.MultiDecoder(none_type_0)


def test_case_13():
    byte_chunker_0 = module_0.ByteChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3


def test_case_14():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3


def test_case_15():
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3


@pytest.mark.xfail(strict=True)
def test_case_16():
    deflate_decoder_0 = module_0.DeflateDecoder()
    assert deflate_decoder_0.first_attempt is True
    assert (
        f"{type(deflate_decoder_0.decompressor).__module__}.{type(deflate_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    str_0 = text_decoder_0.flush()
    bytes_0 = b"r\xf6\xe1\xd4\x9c\x085\nh\xf7"
    deflate_decoder_0.decode(bytes_0)


def test_case_17():
    line_decoder_0 = module_0.LineDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3


@pytest.mark.xfail(strict=True)
def test_case_18():
    g_zip_decoder_0 = module_0.GZipDecoder()
    assert (
        f"{type(g_zip_decoder_0.decompressor).__module__}.{type(g_zip_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = g_zip_decoder_0.flush()
    assert bytes_0 == b""
    g_zip_decoder_0.decode(g_zip_decoder_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    deflate_decoder_0 = module_0.DeflateDecoder()
    assert deflate_decoder_0.first_attempt is True
    assert (
        f"{type(deflate_decoder_0.decompressor).__module__}.{type(deflate_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = b"r\xf6\xe1\xd4\x9c\x085\nh\xf7"
    deflate_decoder_0.decode(bytes_0)


def test_case_20():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    none_type_0 = None
    list_0 = text_chunker_0.decode(none_type_0)
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_21():
    line_decoder_0 = module_0.LineDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = line_decoder_0.flush()


@pytest.mark.xfail(strict=True)
def test_case_22():
    line_decoder_0 = module_0.LineDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    byte_chunker_0 = module_0.ByteChunker()
    list_2 = byte_chunker_0.decode(list_1)
    bytes_0 = b"C\xa2f"
    list_3 = byte_chunker_0.decode(bytes_0)
    str_0 = "y0oL"
    list_4 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ["y0oL"]
    module_1.getdecoder(byte_chunker_0)


def test_case_23():
    content_decoder_0 = module_0.ContentDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    with pytest.raises(NotImplementedError):
        content_decoder_0.flush()


@pytest.mark.xfail(strict=True)
def test_case_24():
    deflate_decoder_0 = module_0.DeflateDecoder()
    assert deflate_decoder_0.first_attempt is True
    assert (
        f"{type(deflate_decoder_0.decompressor).__module__}.{type(deflate_decoder_0.decompressor).__qualname__}"
        == "zlib.Decompress"
    )
    assert len(module_0.SUPPORTED_DECODERS) == 3
    none_type_0 = None
    deflate_decoder_0.decode(none_type_0)


def test_case_25():
    bool_0 = True
    byte_chunker_0 = module_0.ByteChunker(bool_0)
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = b"User-Agent"
    list_0 = byte_chunker_0.decode(bytes_0)
    buffered_incremental_encoder_0 = module_1.BufferedIncrementalEncoder()


def test_case_26():
    content_decoder_0 = module_0.ContentDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = b"6l~\x9c\xa4\xf5\x03\xad\x16A\x01\xe2I\xd1"
    with pytest.raises(NotImplementedError):
        content_decoder_0.decode(bytes_0)


def test_case_27():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    byte_chunker_0 = module_0.ByteChunker(text_chunker_0)
    byte_chunker_1 = module_0.ByteChunker()
    none_type_0 = None
    list_2 = text_chunker_0.decode(none_type_0)
    bytes_0 = b"C\xa2f"
    list_3 = byte_chunker_1.decode(bytes_0)
    list_4 = text_chunker_0.decode(bytes_0)
    str_0 = "0oL"
    str_1 = text_decoder_0.decode(bytes_0)
    assert str_1 == "C�f"
    text_decoder_1 = module_0.TextDecoder()
    list_5 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ["0oL"]
    list_6 = byte_chunker_1.flush()
    list_7 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_28():
    line_decoder_0 = module_0.LineDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    byte_chunker_0 = module_0.ByteChunker()
    str_0 = "0"
    list_1 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ["0"]
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_29():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    bool_0 = True
    byte_chunker_0 = module_0.ByteChunker(bool_0)
    str_0 = "^b6d4{d("
    list_2 = text_chunker_0.decode(str_0)
    bytes_0 = b"User-Agent"
    list_3 = byte_chunker_0.decode(bytes_0)
    str_1 = "Zo4\x0bbZ,h]"
    list_4 = line_decoder_0.decode(str_1)
    assert line_decoder_0.buffer == ["bZ,h]"]
    list_5 = text_chunker_0.flush()
    list_6 = byte_chunker_0.flush()
    list_7 = byte_chunker_0.flush()
    list_8 = line_decoder_0.flush()
    assert line_decoder_0.buffer == []
    list_9 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_30():
    line_decoder_0 = module_0.LineDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    bool_0 = True
    byte_chunker_0 = module_0.ByteChunker(bool_0)
    bytes_0 = b"User-Agent"
    list_2 = byte_chunker_0.decode(bytes_0)
    str_0 = "Zo4\x0bbZ,h]"
    list_3 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ["bZ,h]"]
    list_4 = byte_chunker_0.flush()


def test_case_31():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    bool_0 = True
    byte_chunker_0 = module_0.ByteChunker(bool_0)
    str_0 = "^b6d4{d("
    list_2 = text_chunker_0.decode(str_0)
    bytes_0 = b"C\xa2f"
    list_3 = byte_chunker_0.decode(bytes_0)
    list_4 = text_chunker_0.decode(str_0)
    str_1 = "#{C$uUr2\n"
    list_5 = line_decoder_0.decode(str_1)
    list_6 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.ZStandardDecoder()


def test_case_32():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    bool_0 = True
    byte_chunker_0 = module_0.ByteChunker(bool_0)
    str_0 = "^b6d4{d("
    bytes_0 = b"User-Agent"
    list_2 = byte_chunker_0.decode(bytes_0)
    list_3 = text_chunker_0.decode(str_0)
    list_4 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ["^b6d4{d("]
    str_1 = "Zo4\x0bbZ,h]"
    list_5 = line_decoder_0.decode(str_1)
    assert line_decoder_0.buffer == ["bZ,h]"]
    list_6 = byte_chunker_0.flush()
    list_7 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_33():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    byte_chunker_0 = module_0.ByteChunker(text_chunker_0)
    byte_chunker_1 = module_0.ByteChunker()
    none_type_0 = None
    list_2 = text_chunker_0.decode(none_type_0)
    bytes_0 = b"C\xa2f"
    list_3 = byte_chunker_1.decode(bytes_0)
    list_4 = text_chunker_0.decode(bytes_0)
    str_0 = ""
    list_5 = line_decoder_0.decode(str_0)
    list_6 = byte_chunker_1.flush()
    list_7 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


def test_case_34():
    dict_0 = {}
    multi_decoder_0 = module_0.MultiDecoder(dict_0)
    assert (
        f"{type(multi_decoder_0).__module__}.{type(multi_decoder_0).__qualname__}"
        == "httpx._decoders.MultiDecoder"
    )
    assert multi_decoder_0.children == []
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    bytes_0 = multi_decoder_0.decode(dict_0)


@pytest.mark.xfail(strict=True)
def test_case_35():
    dict_0 = {}
    multi_decoder_0 = module_0.MultiDecoder(dict_0)
    assert (
        f"{type(multi_decoder_0).__module__}.{type(multi_decoder_0).__qualname__}"
        == "httpx._decoders.MultiDecoder"
    )
    assert multi_decoder_0.children == []
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = multi_decoder_0.flush()
    assert bytes_0 == b""
    line_decoder_0 = module_0.LineDecoder()
    bytes_1 = multi_decoder_0.decode(dict_0)
    module_0.IdentityDecoder(**line_decoder_0)


def test_case_36():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    list_0 = line_decoder_0.flush()
    list_1 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    byte_chunker_0 = module_0.ByteChunker()
    int_0 = 3099
    byte_chunker_1 = module_0.ByteChunker(int_0)
    str_0 = "f(@'i~GVjWd^S)'8g\x0bX"
    list_2 = text_chunker_0.decode(str_0)
    bytes_0 = b"C\xa2f"
    list_3 = byte_chunker_1.decode(bytes_0)
    list_4 = byte_chunker_1.flush()
    byte_chunker_2 = module_0.ByteChunker()
    list_5 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


@pytest.mark.xfail(strict=True)
def test_case_37():
    content_decoder_0 = module_0.ContentDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    str_0 = 'H"uqyR\r'
    list_0 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ['H"uqyR']
    assert line_decoder_0.trailing_cr is True
    none_type_0 = None
    line_decoder_0.decode(none_type_0)


def test_case_38():
    bool_0 = True
    str_0 = "^b6d4{d("
    text_chunker_0 = module_0.TextChunker(bool_0)
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = text_chunker_0.decode(str_0)
    list_1 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()


@pytest.mark.xfail(strict=True)
def test_case_39():
    str_0 = "PATCH"
    list_0 = [str_0, str_0]
    multi_decoder_0 = module_0.MultiDecoder(list_0)
    assert (
        f"{type(multi_decoder_0).__module__}.{type(multi_decoder_0).__qualname__}"
        == "httpx._decoders.MultiDecoder"
    )
    assert multi_decoder_0.children == ["PATCH", "PATCH"]
    assert len(module_0.SUPPORTED_DECODERS) == 3
    multi_decoder_0.flush()


@pytest.mark.xfail(strict=True)
def test_case_40():
    line_decoder_0 = module_0.LineDecoder()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    bytes_0 = b"\x89\xf6"
    str_0 = "AhK?X>^3g\r\\4%$T6\n9"
    list_0 = line_decoder_0.decode(str_0)
    assert line_decoder_0.buffer == ["9"]
    multi_decoder_0 = module_0.MultiDecoder(bytes_0)
    assert (
        f"{type(multi_decoder_0).__module__}.{type(multi_decoder_0).__qualname__}"
        == "httpx._decoders.MultiDecoder"
    )
    assert multi_decoder_0.children == [246, 137]
    multi_decoder_0.decode(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_41():
    int_0 = 2114
    text_chunker_0 = module_0.TextChunker(int_0)
    assert len(module_0.SUPPORTED_DECODERS) == 3
    list_0 = text_chunker_0.flush()
    str_0 = "-!Im};R%P>"
    list_1 = text_chunker_0.decode(str_0)
    module_1.getreader(list_0)


def test_case_42():
    text_chunker_0 = module_0.TextChunker()
    assert len(module_0.SUPPORTED_DECODERS) == 3
    line_decoder_0 = module_0.LineDecoder()
    list_0 = line_decoder_0.flush()
    text_decoder_0 = module_0.TextDecoder()
    assert (
        f"{type(text_decoder_0).__module__}.{type(text_decoder_0).__qualname__}"
        == "httpx._decoders.TextDecoder"
    )
    assert (
        f"{type(text_decoder_0.decoder).__module__}.{type(text_decoder_0.decoder).__qualname__}"
        == "encodings.utf_8.IncrementalDecoder"
    )
    bool_0 = True
    byte_chunker_0 = module_0.ByteChunker(bool_0)
    str_0 = "^b6d4{d("
    list_1 = text_chunker_0.decode(str_0)
    none_type_0 = None
    list_2 = text_chunker_0.decode(none_type_0)
    bytes_0 = b"C\xa2f"
    list_3 = byte_chunker_0.decode(bytes_0)
    str_1 = ' 6D@uA"hbOhh&B6k+N'
    text_chunker_1 = module_0.TextChunker()
    list_4 = text_chunker_1.decode(str_1)
    str_2 = "\r"
    list_5 = line_decoder_0.decode(str_2)
    assert line_decoder_0.trailing_cr is True
    list_6 = byte_chunker_0.flush()
    list_7 = line_decoder_0.flush()
    assert line_decoder_0.trailing_cr is False
    list_8 = text_chunker_0.flush()
    with pytest.raises(ImportError):
        module_0.BrotliDecoder()
