# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import fieldfunctions as module_0
import sympy.physics.vector.vector as module_1


def test_case_0():
    bool_0 = False
    var_0 = module_0.scalar_potential(bool_0, bool_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.Zero"
    )


@pytest.mark.xfail(strict=True)
def test_case_1():
    bool_0 = True
    module_0.scalar_potential(bool_0, bool_0)


def test_case_2():
    bool_0 = False
    var_0 = module_0.is_solenoidal(bool_0)
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"\xe6\x0f\xfc\xbb\xdd\xfcD!Us\xcbEQS\x9e\x1d"
    module_0.is_solenoidal(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    list_0 = []
    module_0.scalar_potential_difference(list_0, list_0, list_0, list_0, list_0)


def test_case_5():
    list_0 = []
    vector_0 = module_1.Vector(list_0)
    var_0 = module_0.divergence(vector_0, vector_0)
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "sympy.core.numbers.Zero"
    )


def test_case_6():
    list_0 = []
    var_0 = module_1.Vector(list_0)
    var_1 = module_0.curl(var_0, var_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "sympy.physics.vector.vector.Vector"
    )
    assert var_1.args == []


@pytest.mark.xfail(strict=True)
def test_case_7():
    str_0 = "J4#Ze*AalYI\">]s-U'a"
    list_0 = [str_0, str_0]
    vector_0 = module_1.Vector(list_0)
    module_0.is_conservative(vector_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "Jq#Ze*AalYI\">]s-U'a"
    list_0 = [str_0, str_0]
    vector_0 = module_1.Vector(list_0)
    module_0.divergence(vector_0, str_0)
